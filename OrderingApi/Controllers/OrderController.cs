using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Logging;using System;using System.Collections.Generic;using System.Linq;using System.Linq.Expressions;using System.Threading.Tasks;namespace OrderingApi.Controllers{    [ApiController]    [Route("[controller]")]    public class OrderController : ControllerBase    {        public static List<Order> Orders = new();        private readonly ILogger<OrderController> _logger;        public OrderController(ILogger<OrderController> logger)        {            _logger = logger;        }        [HttpPost]        public ActionResult<Order> Post(Order order, DateTime date)        {            var calc = new CalculateController()                .Calculate(order, date);            var newOrder = new Order()            {                Id = Guid.NewGuid(),                Drinks = order.Drinks,                Starter = order.Starter,                MainDish = order.MainDish,                TotalPrice = calc,            };            Orders.Add(newOrder);                    return CreatedAtAction(nameof(Get), new {id = newOrder.Id}, new {id = newOrder.Id, totalPrice = newOrder.TotalPrice});        }        [HttpGet]        public ActionResult<Order> Get(Guid id)        {            var order = Orders.SingleOrDefault(order => order.Id == id);            if(order is null)            {                return NotFound($"No order with {id} found");            }            return order;        }        [HttpPut]        public ActionResult<Order> UpdateOrder(Guid id, Order newOrder, DateTime date, bool cancel = false)        {            var existingOrder = Orders.SingleOrDefault(order => order.Id == id);            if(existingOrder is null)            {                return NotFound();            }            var priceForNewOrder = new CalculateController()                .Calculate(newOrder, date);            var updatedOrder = new Order();                        if(cancel == true)            {                updatedOrder = new Order()                {                    Id = existingOrder.Id,                    TotalPrice = existingOrder.TotalPrice -= priceForNewOrder,                    Drinks = new Drinks() {Amount = existingOrder.Drinks.Amount - newOrder.Drinks.Amount},                    Starter = new Starter() {Amount = existingOrder.Starter.Amount - newOrder.Starter.Amount},                    MainDish = new MainDish() {Amount = existingOrder.MainDish.Amount - newOrder.MainDish.Amount},                };            }            else            {                updatedOrder = new Order()                {                    Id = existingOrder.Id,                    TotalPrice = existingOrder.TotalPrice += priceForNewOrder,                    Drinks = new Drinks() {Amount = existingOrder.Drinks.Amount + newOrder.Drinks.Amount},                    Starter = new Starter() {Amount = existingOrder.Starter.Amount + newOrder.Starter.Amount},                    MainDish = new MainDish() {Amount = existingOrder.MainDish.Amount + newOrder.MainDish.Amount},                };            }                        var indexOfOrder = Orders.FindIndex(order => order.Id == id);            Orders[indexOfOrder] = updatedOrder;            return NoContent();        }    }}