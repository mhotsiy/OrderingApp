using System;using System.Net;using System.Threading.Tasks;using FluentAssertions;using FluentAssertions.Execution;using NUnit.Framework;using OrderAppTests.Models;namespace OrderAppTests;public class Tests{    private OrderController _orderController;    private CalculatePriceController _calculateController;        [SetUp]    public void Setup()    {        _calculateController = new CalculatePriceController();        _orderController = new OrderController();    }    [Description("A group of 4 people orders 4 starters, 4 mains and 4 drinks. When the order is sent to the endpoint the total is calculated correctly")]    [Test]    public async Task TotalOrderPriceIsCorrectWhenOrdered4StartersMainsAndDrinksBefore19()    {        var order = new Order()        {            Drinks = new Drinks() {Amount = 4},            MainDish = new MainDish() {Amount = 4},            Starter = new Starter() {Amount = 4},        };        var response = await _orderController.Create(order, new DateTime(2022, 5, 1, 18, 59, 59));        using (new AssertionScope())        {            response.StatusCode.Should().Be(HttpStatusCode.Created);            response.Data.TotalPrice.Should().Be((decimal) 45.9);        }    }    [Description    (@"A group of 2 people order 1 starter and 2 mains and 2 drinks before 19:00. The endpoint can be called and return the correct total.        They are then joined by 2 more people at 20:00 who order 2 mains and 2 drinks, when the updated order is sent to the endpoint the total is calculated correctly.")]    [Test]    public async Task OrderPriceIsCorrectWhenFirstOrderBefore19AndSecondOrderAfter19()    {        var firstOrder = new Order()        {            Drinks = new Drinks() {Amount = 4},            MainDish = new MainDish() {Amount = 4},            Starter = new Starter() {Amount = 4},        };        var responseFromFirstOrder = await _orderController.Create(firstOrder, new DateTime(2022, 5, 1, 18, 59, 59));        using (new AssertionScope())        {            responseFromFirstOrder.StatusCode.Should().Be(HttpStatusCode.Created);            responseFromFirstOrder.Data.TotalPrice.Should().Be((decimal) 45.9);        }        var secondOrder = new Order()        {            Drinks = new Drinks() {Amount = 2},            MainDish = new MainDish() {Amount = 2},            Starter = new Starter() {Amount = 0},        };        var responseFromSecondOrder = await _orderController            .Update(responseFromFirstOrder.Data.Id, secondOrder, new DateTime(2022, 5, 1, 20, 00, 00));        responseFromSecondOrder.StatusCode.Should().Be(HttpStatusCode.NoContent);        var order = await _orderController            .GetOrder(responseFromFirstOrder.Data.Id);        // expected to fail        using (new AssertionScope())        {            order.Data.Id.Should().Be(responseFromFirstOrder.Data.Id);            order.Data.TotalPrice.Should().Be((decimal) 36.45);            order.Data.Drinks.Amount.Should().Be(3);            order.Data.MainDish.Amount.Should().Be(3);            order.Data.Starter.Amount.Should().Be(3);        }    }    [Description    (@"A group of 4 people order 4 starters, 4 mains and 4 drinks. When the order is sent to the endpoint the total is calculated correctly.         1 person cancels their order so the order is 3 starters, 3 mains and 3 drinks, when the updated order is sent to the endpoint the total is calculated correctly.")]    [Test]    public async Task OrderPriceRecalculatedCorrectlyAfterOrderIsPartiallyCancelled()    {        var firstOrder = new Order()        {            Drinks = new Drinks() {Amount = 4},            MainDish = new MainDish() {Amount = 4},            Starter = new Starter() {Amount = 4},        };        var responseFromFirstOrder = await _orderController.Create(firstOrder, new DateTime(2022, 5, 1, 18, 59, 59));                using (new AssertionScope())        {            responseFromFirstOrder.StatusCode.Should().Be(HttpStatusCode.Created);            responseFromFirstOrder.Data.TotalPrice.Should().Be((decimal) 45.9);        }                var cancelOrder = new Order()        {            Drinks = new Drinks() {Amount = 1},            MainDish = new MainDish() {Amount = 1},            Starter = new Starter() {Amount = 1},        };        var updatedOrderResponse = await _orderController            .Update(responseFromFirstOrder.Data.Id, cancelOrder, new DateTime(2022, 5, 1, 19, 00, 00), cancel:true);        updatedOrderResponse.StatusCode.Should().Be(HttpStatusCode.NoContent);        var order = await _orderController            .GetOrder(responseFromFirstOrder.Data.Id);        using (new AssertionScope())        {            order.Data.Id.Should().Be(responseFromFirstOrder.Data.Id);            order.Data.TotalPrice.Should().Be((decimal) 34.42);            order.Data.Drinks.Amount.Should().Be(3);            order.Data.MainDish.Amount.Should().Be(3);            order.Data.Starter.Amount.Should().Be(3);        }    }}